apply plugin: 'com.android.application'

def configInfo = rootProject.ext.android // 定义配置文件的路径
def libraries = rootProject.ext.dependencies
def signingInfo = rootProject.ext.signing

//定义打包时间函数
def packageTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion configInfo.compileSdkVersion
    buildToolsVersion configInfo.buildToolsVersion

    defaultConfig {
        applicationId configInfo.applicationId
        minSdkVersion configInfo.minSdkVersion
        targetSdkVersion configInfo.targetSdkVersion
        versionCode configInfo.versionCode
        versionName configInfo.versionName
        multiDexEnabled true
    }


    signingConfigs {
        debug {

        }
        release {
            keyAlias signingInfo.key_alias
            keyPassword signingInfo.key_password
            storeFile file(signingInfo.store_file)
            storePassword signingInfo.store_assword
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
    }


    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "String", "API_HOST", "\"http://api.test.com\""
            minifyEnabled false
            zipAlignEnabled true
            shrinkResources true
            signingConfig signingConfigs.debug
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "String", "API_HOST", "\"http://api.release.com\""
            minifyEnabled false
            zipAlignEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //修改生成的最终文件名
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                File outputDirectory = new File(outputFile.parent);
                def fileName
                if (variant.buildType.name == "release") {
                    // 输出apk名称为app_v1.0.0_2015-06-15_playStore.apk
                    fileName = "app_v${defaultConfig.versionName}_${packageTime()}_${variant.productFlavors[0].name}.apk"
                } else {
                    fileName = "app_v${defaultConfig.versionName}_${packageTime()}_beta.apk"
                }
                output.outputFile = new File(outputDirectory, fileName)
            }
        }
    }

    productFlavors {
        playStore {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "playStore"]
        }
        miui {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "miui"]
        }
        wandoujia {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia"]
        }
    }
}

//File propFile = file('signing.properties');
//if (propFile.exists()) {
//    def Properties props = new Properties()
//    props.load(new FileInputStream(propFile))
//    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
//        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
//        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
//        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
//        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
//    } else {
//        android.buildTypes.release.signingConfig = null
//    }
//} else {
//    android.buildTypes.release.signingConfig = null
//}

dependencies {
    compile project(':message')

    compile libraries.multidex
    compile libraries.junit
}
